<article>


<articleinfo>
<title>Sphinx 0.9.7 reference manual</title>
<subtitle>Free open-source SQL full-text search engine</subtitle>
<copyright>
<year>2001-2007</year>
<holder>Andrew Aksyonoff, <email>shodan(at)shodan.ru</email></holder>
</copyright>
</articleinfo>


<sect1 id="intro"><title>Introduction</title>


<sect2 id="about"><title>About</title>
<para>
Sphinx is a full-text search engine, distributed under GPL version 2.
Commercial licensing (eg. for embedded use) is also available upon request. 
</para>
<para>
Generally, it's a standalone search engine, meant to provide fast,
size-efficient and relevant full-text search functions to other
applications. Sphinx was specially designed to integrate well with
SQL databases and scripting languages.
</para>
<para>
Currently built-in data source drivers support fetching data either via
direct connection to MySQL, or PostgreSQL, or from a pipe in a custom XML
format. Adding new drivers (eg. to natively support some other DBMS)
is designed to be as easy as possible.
</para>
<para>
Search API is natively ported to PHP, Python, Perl and Ruby and
also available as a pluggable MySQL storage engine. API is very
lightweight so porting it to new language is known to take a few hours.
</para>
<para>
As for the name, Sphinx is an acronym which is officially decoded
as SQL Phrase Index. Yes, I know about CMU's Sphinx project. 
</para>
</sect2>


<sect2 id="features"><title>Sphinx features</title>
<para>
<itemizedlist>
<listitem>high indexing speed (upto 10 MB/sec on modern CPUs);</listitem>
<listitem>high search speed (avg query is under 0.1 sec on 2-4 GB text collections);</listitem>
<listitem>high scalability (upto 100 GB of text, upto 100 M documents on a single CPU);</listitem>
<listitem>provides good relevance ranking through combination of phrase proximity ranking and statistical (BM25) ranking;</listitem>
<listitem>provides distributed searching capabilities;</listitem>
<listitem>provides document exceprts generation;</listitem>
<listitem>provides searching from within MySQL through pluggable storage engine;</listitem>
<listitem>supports boolean, phrase, and word proximity queries;</listitem>
<listitem>supports multiple full-text fields per document (upto 32 by default);</listitem>
<listitem>supports multiple additional attributes per document (ie. groups, timestamps, etc);</listitem>
<listitem>supports stopwords;</listitem>
<listitem>supports both single-byte encodings and UTF-8;</listitem>
<listitem>supports English stemming, Russian stemming, and Soundex for morphology;</listitem>
<listitem>supports MySQL natively (MyISAM and InnoDB tables are both supported);</listitem>
<listitem>supports PostgreSQL natively.</listitem>
</itemizedlist>
</para>
</sect2>


<sect2 id="getting"><title>Where to get Sphinx</title>
<para>Sphinx is available through its official Web site at <ulink url="http://www.sphinxsearch.com/">http://www.sphinxsearch.com/</ulink>.
</para>
<para>Currently, Sphinx distribution tarball includes the following software:
<itemizedlist>
<listitem><filename>indexer</filename>: an utility which creates fulltext indexes;</listitem>
<listitem><filename>search</filename>: a simple command-line (CLI) test utility which searches through fulltext indexes;</listitem>
<listitem><filename>searchd</filename>: a daemon which enables external software (eg. Web applications) to search through fulltext indexes;</listitem>
<listitem><filename>sphinxapi</filename>: a set of searchd client API libraries for popular Web scripting languages (PHP, Python, Perl, Ruby).</listitem>
</itemizedlist>
</para>
</sect2>


<sect2 id="license"><title>License</title>
<para>
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License,
or (at your option) any later version. See COPYING file for details.
</para>
<para>
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details. 
</para>
<para>
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place, Suite 330, Boston, MA 02111-1307 USA 
</para>
<para>
If you don't want to be bound by GNU GPL terms (for instance,
if you would like to embed Sphinx in your software, but would not
like to disclose its source code), please contact
<link linkend="author">the author</link> to obtain
a commercial license.
</para>
</sect2>


<sect2 id="author"><title>Author and contributors</title>
<bridgehead>Author</bridgehead>
<para>
Sphinx initial author and current primary developer is:
<itemizedlist>
<listitem>Andrew Aksyonoff, <email>shodan(at)shodan.ru</email></listitem>
</itemizedlist>
</para>
<bridgehead>Contributors</bridgehead>
<para>People who contributed to Sphinx and their contributions (in no particular order) are:
<itemizedlist>
<listitem>Robert "coredev" Bengtsson (Sweden), initial version of PostgreSQL data source;</listitem>
<listitem>Len Kranendonk, Perl API</listitem>
<listitem>Dmytro Shteflyuk, Ruby API</listitem>
</itemizedlist>
</para>
<para>
Many other people have contributed ideas, bug reports, fixes, etc.
Thank you!
</para>
</sect2>


<sect2 id="history"><title>History</title>
<para>
Sphinx development was started back in 2001, because I didn't manage
to find an acceptable search solution (for a database driven Web site)
which would meet my requirements. Actually, each and every important aspect was a problem: 
<itemizedlist>
<listitem>search quality (ie. good relevance)
<itemizedlist><listitem>statistical ranking methods performed rather bad, especially on large collections of small documents (forums, blogs, etc)</listitem></itemizedlist>
</listitem>
<listitem>search speed
<itemizedlist><listitem>especially if searching for phrases which contain stopwords, as in "to be or not to be"</listitem></itemizedlist>
</listitem>
<listitem>moderate disk and CPU requirements when indexing
<itemizedlist><listitem>important in shared hosting enivronment, not to mention the indexing speed.</listitem></itemizedlist>
</listitem>
</itemizedlist>
</para>
<para>
Despite the amount of time passed and numerous improvements made in the
other solutions, there's still no solution which I personally would
be eager to migrate to. 
</para>
<para>
Considering that and a lot of positive feedback received from Sphinx users
during last years, the obvious decision is to continue developing Sphinx
(and, eventually, to take over the world).
</para>
</sect2>


</sect1>
<sect1 id="installation"><title>Installation</title>


<sect2 id="supported-system"><title>Supported systems</title>
<para>
Most modern UNIX systems with a C++ compiler should be able
to compile and run Sphinx without any modifications.
</para>
<para>
Currently known systems Sphinx has been successfully running on are:
<itemizedlist>
<listitem>Linux 2.4.x, 2.6.x (various distributions)</listitem>
<listitem>Windows 2000, XP</listitem>
<listitem>FreeBSD 4.x, 5.x, 6.x</listitem>
<listitem>NetBSD 1.6</listitem>
<listitem>Solaris 9</listitem>
</itemizedlist>
</para>
<para>
I hope Sphinx will work on other Unix platforms as well. 
If the platform you run Sphinx on is not in this list,
please do report it.
</para>
<para>
At the moment, Windows version of Sphinx's <filename>searchd</filename>
daemon is not intended to be used in production because it can only handle
one client at a time.
</para>
</sect2>


<sect2 id="required-tools"><title>Required tools</title>
<para>
On UNIX, you will need the following tools to build
and install Sphinx:
<itemizedlist>
<listitem>a working C++ compiler. GNU gcc is known to work.</listitem>
<listitem>a good make program. GNU make is known to work.</listitem>
</itemizedlist>
</para>
<para>
On Windows, you will need Microsoft Visual C/C++ Studio .NET 2003 or 2005.
Other compilers/environments will probably work as well, but for the
time being, you will have to build makefile (or other environment
specific project files) manually.
</para>
</sect2>


<sect2 id="installing"><title>Installing Sphinx</title>
<para><orderedlist>
<listitem>
	<para>
	Extract everything from the distribution tarball (haven't you already?)
	and go to the <filename>sphinx</filename> subdirectory:
	</para>
<para><userinput><literallayout>$ tar xzvf sphinx-0.9.7.tar.gz
$ cd sphinx
</literallayout></userinput></para>
</listitem>
<listitem>
	<para>Run the configuration program:</para>
	<para><userinput><literallayout>$ ./configure</literallayout></userinput></para>
	<para>
	There's a number of options to configure. The complete listing may
	be obtained by using <option>--help</option> switch. The most important ones are:
	<itemizedlist>
		<listitem><option>--prefix</option>, which specifies where to install Sphinx;</listitem>
		<listitem><option>--with-mysql</option>, which specifies where to look for MySQL
			include and library files, if auto-detection fails;</listitem>
		<listitem><option>--with-pgsql</option>, which specifies where to look for PostgreSQL
			include and library files.</listitem>
	</itemizedlist>
	</para>
</listitem>
<listitem>
	<para>Build the binaries:</para>
	<para><userinput><literallayout>$ make</literallayout></userinput></para>
</listitem>
<listitem>
	<para>Install the binaries in the directory of your choice:</para>
	<para><userinput><literallayout>$ make install</literallayout></userinput></para>
</listitem>
</orderedlist></para>
</sect2>


<sect2 id="install-problems"><title>Known installation issues</title>
<para>
If <filename>configure</filename> fails to locate MySQL headers and/or libraries,
try checking for and installing <filename>mysql-devel</filename> package. On some systems,
it is not installed by default.
</para>
<para>
If <filename>make</filename> fails with a message which look like
<programlisting>
/bin/sh: g++: command not found
make[1]: *** [libsphinx_a-sphinx.o] Error 127
</programlisting>
try checking for and installing <filename>gcc-c++</filename> package.
</para>
<para>
If you are getting compile-time errors which look like
<programlisting>
sphinx.cpp:67: error: invalid application of `sizeof' to
    incomplete type `Private::SizeError&lt;false&gt;'
</programlisting>
this means that some compile-time type size check failed.
The most probable reason is that off_t type is less than 64-bit
on your system. As a quick hack, you can edit sphinx.h and replace off_t
with DWORD in a typedef for SphOffset_t, but note that this will prohibit
you from using full-text indexes larger than 2 GB. Even if the hack helps,
please report such issues, providing the exact error message and
compiler/OS details, so I could properly fix them in next releases.
</para>
<para>
If you keep getting any other error, or the suggestions above
do not seem to help you, please don't hesitate to contact me.
</para>
</sect2>


<sect2 id="quick-tour"><title>Quick Sphinx usage tour</title>
<para>
All the example commands below assume that you installed Sphinx
in <filename>/usr/local/sphinx</filename>.
</para>
<para>
To use Sphinx, you will need to:
</para>
<orderedlist>
<listitem>
	<para>Create a configuration file.</para>
	<para>
	Default configuration file name is <filename>sphinx.conf</filename>.
	All Sphinx programs look for this file in current working directory
	by default.
	</para>
	<para>
	Sample configuration file, <filename>sphinx.conf.dist</filename>, which has
	all the options documented, is created by <filename>configure</filename>.
	Copy and edit that sample file to make your own configuration:
	</para>
<para><userinput><literallayout>$ cd /usr/local/sphinx/etc
$ cp sphinx.conf.dist sphinx.conf
$ vi sphinx.conf</literallayout></userinput></para>
	<para>
	Sample configuration file is setup to index <filename>documents</filename>
	table from MySQL database <filename>test</filename>; so there's <filename>example.sql</filename>
	sample data file to populate that table with a few documents for testing purposes:
	</para>
	<para><userinput><literallayout>$ mysql -u test &lt; /usr/local/sphinx/etc/example.sql</literallayout></userinput></para>
</listitem>
<listitem>
	<para>Run the indexer to create full-text index from your data:</para>
<para><userinput><literallayout>$ cd /usr/local/sphinx/etc
$ /usr/local/sphinx/bin/indexer</literallayout></userinput></para>
</listitem>
<listitem>
	<para>Query your newly created index!</para>
</listitem>
</orderedlist>
<para>
To query the index from command line, use <filename>search</filename> utility:
</para>
<para><userinput><literallayout>$ cd /usr/local/sphinx/etc
$ /usr/local/sphinx/bin/search test</literallayout></userinput></para>
<para>
To query the index from your PHP scripts, you need to:
</para>
<orderedlist>
	<listitem>
		<para>Run the search daemon which your script will talk to:</para>
<para><userinput><literallayout>$ cd /usr/local/sphinx/etc
$ /usr/local/sphinx/bin/searchd</literallayout></userinput></para>
	</listitem>
	<listitem>
		<para>
		Run the attached PHP API test script (to ensure that the daemon
		was succesfully started and is ready to serve the queries):
		</para>
<para><userinput><literallayout>$ cd sphinx/api
$ php test.php test</literallayout></userinput></para>
	</listitem>
	<listitem>
		<para>
		Include the API (it's located in <filename>api/sphinxapi.php</filename>)
		into your own scripts and use it.
		</para>
	</listitem>
</orderedlist>
<para>
Happy searching!
</para>
</sect2>


</sect1>
<sect1 id="indexing"><title>Indexing</title>


<sect2 id="sources"><title>Data sources</title>
<para>
The data to be indexed can generally come from very different
sources: SQL databases, plain text files, HTML files, mailboxes,
and so on. From Sphinx point of view, the data it indexes is a
set of structured <glossterm>documents</glossterm>, each of which has the
same set of <glossterm>fields</glossterm>. This is biased towards SQL, where
each row correspond to a document, and each column to a field.
</para>
<para>
Depending on what source Sphinx should get the data from,
different code is required to fetch the data and prepare it for indexing.
This code is called <glossterm>data source driver</glossterm> (or simply
<glossterm>driver</glossterm> or <glossterm>data source</glossterm> for brevity).
</para>
<para>
At the time of this writing, there are drivers for MySQL and
PostgreSQL databases, which can connect to the database using
its native C/C++ API, run queries and fetch the data. There's
also a driver called XMLpipe, which runs a specified command
and reads the data from its <filename>stdout</filename>.
See <xref linkend="xmlpipe"/> section for the format description.
</para>
<para>
There can be as many sources per index as necessary. They will be
sequentially processed in the very same order which was specifed in
index definition. All the documents coming from those sources
will be merged as if they were coming from a single source.
</para>
</sect2>


<sect2 id="attributes"><title>Attributes</title>
<para>
It is often needed to do some additional processing of full-text
search results depending not only on matching document ID and weight,
but on a number of other per-document values as well.
For instance, one might need to
sort news search results by date and then relevance,
or search through products within specified price range,
or limit blog search to posts made by selected users,
or group results by month.
</para>
<para>
To do that efficiently, Sphinx allows to attach a number
of additional <glossterm>attributes</glossterm> to each document, and stores their
values when indexing. These values may then be used to filter,
sort, or group full-text matches when searching.
</para>
<para>
A good example would be a forum posts table. Assume that
'title' and 'content' fields need to be full-text searchable,
but it is also needed to optionally limit searching to some author
or sub-forum (ie. specific values of 'author_id' or 'forum_id'),
or to sort matches by 'post_date', or to group matching posts
by month of the 'post_date' and calculate per-group match counts.
</para>
<para>
This can be achieved by specifying all the mentioned columns
(excluding 'title' and 'content' which are full-text fields) as
attributes and then using API calls to setup filtering, sorting,
and grouping. Here as an example.
<bridgehead>Example sphinx.conf part:</bridgehead>
<programlisting>
...
sql_query = SELECT id, title, content, \
	author_id, forum_id, post_date FROM my_forum_posts
sql_group_column = author_id
sql_group_column = forum_id
sql_date_column = post_date
...
</programlisting>
<bridgehead>Example application code (in PHP):</bridgehead>
<programlisting>
// only search posts by author whose ID is 123
$cl->SetFilter ( "author_id", array ( 123 ) );

// only search posts in sub-forums 1, 3 and 7
$cl->SetFilter ( "forum_id", array ( 1,3,7 ) );

// sort found posts by posting date in descending order
$cl->SetSortMode ( SPH_ATTR_DESC, "post_date" );
</programlisting>
</para>
<para>
Attributes are named. Attribute names are case insensitive.
</para>
<para>
Attributes are <emphasis>not</emphasis> full-text indexed;
they are stored in the index as is.
</para>
<para>
Currently supported attribute types are:
<itemizedlist>
<listitem>32-bit unsigned integer,</listitem>
<listitem>UNIX timestamp.</listitem>
</itemizedlist>
</para>
<para>
Attribute values are currently internally stored as fixed-size
4-byte values. A set of all per-document attribute values is called <glossterm>docinfo</glossterm>.
Docinfos can either be
<itemizedlist>
<listitem>stored separately ("extern" storage in <filename>.spa</filename> file), or</listitem>
<listitem>attached to each occurence of document ID in full-text index data
("inline" storage in <filename>.spd</filename> file).</listitem>
</itemizedlist>
</para>
<para>
Externally stored docinfo is kept in RAM when searching. Thus
"inline" may be the only viable option for huge (50-100+ million
documents) datasets because of limited RAM size. However, for
smaller datasets "extern" storage makes both indexing and
searching <emphasis>much</emphasis> more efficient.
</para>
<para>
Additional search-time memory requirements for extern storage are
(1+number_of_attrs)*number_of_docs*4 bytes, ie. 10 million docs with
2 groups and 1 timestamp will take (1+2+1)*10M*4 = 160 MB of RAM.
This is <emphasis>PER DAEMON</emphasis>, ie. searchd
will alloc 160 MB on startup, read the data and keep it shared
between queries; the children will <emphasis>NOT</emphasis> allocate additional
copies of this data.
</para>
</sect2>


<sect2 id="indexes"><title>Indexes</title>
<para>
To be able to answer full-text search queries fast, Sphinx needs
to build a special data structure optimized for such queries from
your text data. This structure is called <glossterm>index</glossterm>; and
the process of building index from text is called <glossterm>indexing</glossterm>.
</para>
<para>
Different index types are well suited for different tasks.
For example, a disk-based tree-based index would be easy to
update (ie. insert new documents to existing index), but rather
slow to search. Therefore, Sphinx architecture allows for different
<glossterm>index types</glossterm> to be implemented easily.
</para>
<para>
The only index type which is implemented in Sphinx at the moment is
designed for maximum indexing and searching speed. This comes at a cost
of updates being really slow; theoretically, it might be slower to
update this type of index than than to reindex it from scratch.
However, this very frequently could be worked around with
muiltiple indexes, see <xref linkend="live-updates"/> for details.
</para>
<para>
It is planned to implement more index types, including the
type which would be updateable in real time.
</para>
<para>
There can be as many indexes per configuration file as necessary.
<filename>indexer</filename> utility can reindex either all of them
(if <option>--all</option> option is specified), or a certain explicitly
specified subset. <filename>searchd</filename> utility will serve all
the specified indexes, and the clients can specify what indexes to
search in run time.
</para>
</sect2>


<sect2 id="data-restrictions"><title>Restrictions on the source data</title>
<para>
There are a few different restrictions imposed on the source data
which is going to be indexed by Sphinx, of which the single most
important one is:
</para>
<para><emphasis role="bold">
ALL DOCUMENT IDS MUST BE UNIQUE UNSIGNED NON-ZERO 32-BIT INTEGER NUMBERS.
</emphasis></para>
<para>
If this requirement is not met, different bad things can happen.
For instance, Sphinx can crash with an internal assertion while indexing;
or produce strange results when searching due to conflicting IDs.
Also, a 1000-pound gorilla might eventually come out of your
display and start throwing barrels at you. You've been warned.
</para>
</sect2>


<sect2 id="charsets"><title>Charsets, case folding, and translation tables</title>
<para>
When indexing some index, Sphinx fetches documents from
the specified sources, splits the text into words, and does
case folding so that "Abc", "ABC" and "abc" would be treated
as the same word (or, to be pedantic, <glossterm>term</glossterm>).
</para>
<para>
To do that properly, Sphinx needs to know
<itemizedlist>
<listitem>what encoding is the source text in;</listitem>
<listitem>what characters are letters and what are not;</listitem>
<listitem>what letters should be folded to what letters.</listitem>
</itemizedlist>
This should be configured on a per-index basis using
<option><!--link linkend="ref-charset-type"-->charset_type<!--/link--></option> and 
<option><!--link linkend="ref-charset-table"-->charset_table<!--/link--></option> options.
With <option><!--link linkend="ref-charset-type"-->charset_type<!--/link--></option>,
one would specify whether the document encoding is single-byte (SBCS) or UTF-8.
<option><!--link linkend="ref-charset-table"-->charset_table<!--/link--></option> would
then be used to specify the table which maps letter characters to their case
folded versions. The characters which are not in the table are considered
to be non-letters and will be treated as word separators when indexing
or searching through this index.
</para>
<para>
Note that while default tables do not include space character
(ASCII code 0x20, Unicode U+0020) as a letter, it's in fact
<emphasis>perfectly legal</emphasis> to do so. This can be
useful, for instance, for indexing tag clouds, so that space-separated
word sets would index as a <emphasis>single</emphasis> search query term.
</para>
<para>
Default tables currently include English and Russian characters.
Please do submit your tables for other languages!
</para>
</sect2>


<sect2 id="sql"><title>SQL data sources (MySQL, PostgreSQL)</title>
<para>
With all the SQL drivers, indexing generally works as follows.
<itemizedlist>
<listitem>connection to the database is established;</listitem>
<listitem>pre-query (see <xref linkend="ref-sql-query-pre"/>) is executed
	to perform any necessary initial setup, such as setting per-connection encoding with MySQL;</listitem>
<listitem>main query (see <xref linkend="ref-sql-query"/>) is executed and the rows it returns are indexed;</listitem>
<listitem>post-query (see <xref linkend="ref-sql-query-post"/>) is executed
	to perform any necessary cleanup;</listitem>
<listitem>connection to the database is closed;</listitem>
<listitem>indexer does the sorting phase (to be pedantic, index-type specific post-processing);</listitem>
<listitem>connection to the database is established again;</listitem>
<listitem>post-index query (see <xref linkend="ref-sql-query-post-index"/>) is executed
	to perform any necessary final cleanup;</listitem>
<listitem>connection to the database is closed again.</listitem>
</itemizedlist>
Most options, such as database user/host/password, are straightforward.
However, there are a few subtle things, which are discussed in more detail here.
</para>
<bridgehead id="ranged-queries">Ranged queries</bridgehead>
<para>
Main query, which needs to fetch all the documents, can impose
a read lock on the whole table and stall the concurrent queries
(eg. INSERTs to MyISAM table), waste a lot of memory for result set, etc.
To avoid this, Sphinx supports so-called <glossterm>ranged queries</glossterm>.
With ranged queries, Sphinx first fetches min and max document IDs from
the table, and then substitutes different ID intervals into main query text
and runs the modified query to fetch another chunk of documents.
Here's an example.
</para>
<example id="ex-ranged-queries"><title>Ranged query usage example</title>
<programlisting>
# in sphinx.conf

sql_query_range	= SELECT MIN(id),MAX(id) FROM documents
sql_range_step = 1000
sql_query = SELECT * FROM documents WHERE id&gt;=$start AND id&lt;=$end
</programlisting>
</example>
<para>
If the table contains document IDs from 1 to, say, 2345, then sql_query would
be run three times:
<orderedlist>
<listitem>with <option>$start</option> replaced with 1 and <option>$end</option> replaced with 1000;</listitem>
<listitem>with <option>$start</option> replaced with 1001 and <option>$end</option> replaced with 2000;</listitem>
<listitem>with <option>$start</option> replaced with 2000 and <option>$end</option> replaced with 2345.</listitem>
</orderedlist>
Obviously, that's not much of a difference for 2000-row table,
but when it comes to indexing 10-million-row MyISAM table,
ranged queries might be of some help.
</para>
<bridgehead><option>sql_post</option> vs. <option>sql_post_index</option></bridgehead>
<para>
The difference between post-query and post-index query is in that post-query
is run immediately when Sphinx received all the documents, but further indexing
<emphasis role="bold">may</emphasis> still fail for some other reason. On the contrary,
by the time the post-index query gets executed, it is <emphasis role="bold">guaranteed</emphasis>
that the indexing was succesful. Database connection is dropped and re-established
because sorting phase can be very lengthy and would just timeout otherwise.
</para>
</sect2>


<sect2 id="xmlpipe"><title>XMLpipe data source</title>
<para>
XMLpipe data source is designed to enable users to plug data into
Sphinx without having to implement new data sources drivers themselves.
</para>
<para>
To use XMLpipe, configure the data source in your configuration file
as follows:
<programlisting>
source example_xmlpipe_source
{
    type = xmlpipe
    xmlpipe_command = perl /www/mysite.com/bin/sphinxpipe.pl
}
</programlisting>
The <filename>indexer</filename> will run the command specified
in <option><link linkend="ref-xmlpipe-command">xmlpipe_command</link></option>,
and then read, parse and index the data it prints to <filename>stdout</filename>.
</para>
<para>
XMLpipe driver expects the data to be in special XML format.
Here's the example document stream, consisting of two documents:
<example id="ex-xmlpipe-document"><title>XMLpipe document stream</title>
<programlisting>
&lt;document&gt;
&lt;id&gt;123&lt;/id&gt;
&lt;group&gt;45&lt;/group&gt;
&lt;timestamp&gt;1132223498&lt;/timestamp&gt;
&lt;title&gt;test title&lt;/title&gt;
&lt;body&gt;
this is my document body
&lt;/body&gt;
&lt;/document&gt;

&lt;document&gt;
&lt;id&gt;124&lt;/id&gt;
&lt;group&gt;46&lt;/group&gt;
&lt;timestamp&gt;1132223498&lt;/timestamp&gt;
&lt;title&gt;another test&lt;/title&gt;
&lt;body&gt;
this is another document
&lt;/body&gt;
&lt;/document&gt;
</programlisting>
</example>
</para>
<para>
At the moment, the driver is using a custom manually written parser
which is pretty fast but really strict; so almost all the fields <emphasis>must</emphasis>
be present, formatted <emphasis>exactly</emphasis> as in this example, and
occur <emphasis>exactly</emphasis> in this order. The only optional field
is <option>timestamp</option>; it's set to 1 if it's missing.
</para>
</sect2>


<sect2 id="live-updates"><title>Live index updates</title>
<para>
There's a frequent situation when the total dataset is too big
to be reindexed from scratch often, but the amount of new records
is rather small. Example: a forum with a 1,000,000 archived posts,
but only 1,000 new posts per day.
</para>
<para>
In this case, "live" (almost real time) index updates could be
implemented using so called "main+delta" scheme.
</para>
<para>
The idea is to set up two sources and two indexes, with one
"main" index for the data which only changes rarely (if ever),
and one "delta" for the new documents. In the example above,
1,000,000 archived posts would go to the main index, and newly
inserted 1,000 posts/day would go to the delta index. Delta index
could then be reindexed very frequently, and the documents can
be made available to search in a matter of minutes.
</para>
<para>
Specifying which documents should go to what index and
reindexing main index could also be made fully automatical.
One option would be to make a counter table which would track
the ID which would split the documents, and update it
whenever the main index is reindexed.
<example id="ex-live-updates">
<title>Fully automated live updates</title>
<programlisting>
# in MySQL
CREATE TABLE sph_counter
(
    counter_id INTEGER PRIMARY KEY NOT NULL,
    max_doc_id INTEGER NOT NULL
);

# in sphinx.conf
source main
{
    # ...
    sql_query_pre = REPLACE INTO sph_counter SELECT 1, MAX(id) FROM documents
    sql_query = SELECT id, title, body FROM documents \
        WHERE id&lt;=( SELECT max_doc_id FROM sph_counter WHERE counter_id=1 )
}

source delta : main
{
    sql_query_pre =
    sql_query = SELECT id, title, body FROM documents \
        WHERE id&gt;( SELECT max_doc_id FROM sph_counter WHERE counter_id=1 )
}
</programlisting>
</example>
</para>
</sect2>


</sect1>
<sect1 id="searching"><title>Searching</title>


<sect2 id="matching-modes"><title>Matching modes</title>
<para>
There are the following matching modes available:
<itemizedlist>
<listitem>SPH_MATCH_ALL, matches all query words (default mode);</listitem>
<listitem>SPH_MATCH_ANY, matches any of the query words;</listitem>
<listitem>SPH_MATCH_PHRASE, matches query as a phrase, requiring perfect match;</listitem>
<listitem>SPH_MATCH_BOOLEAN, matches query as a boolean expression (see <xref linkend="boolean-syntax"/>);</listitem>
<listitem>SPH_MATCH_EXTENDED, matches query as an expression in Sphinx internal query language (see <xref linkend="extended-syntax"/>).</listitem>
</itemizedlist>
</para>
</sect2>

<sect2 id="boolean-syntax"><title>Boolean query syntax</title>
<para>
Boolean queries allow the following special operators to be used:
<itemizedlist>
<listitem>explicit operator AND: <programlisting>hello &amp; world</programlisting></listitem>
<listitem>operator OR: <programlisting>hello | world</programlisting></listitem>
<listitem>operator NOT:
<programlisting>
hello -world
hello !world
</programlisting>
</listitem>
<listitem>grouping: <programlisting>( hello world )</programlisting></listitem>
</itemizedlist>
Here's an example query which uses all these operators:
<example id="ex-boolean-query"><title>Boolean query example</title>
<programlisting>
( cat -dog ) | ( cat -mouse)
</programlisting>
</example>
</para>
<para>
There always is implicit AND operator, so "hello world" query actually
means "hello &amp; world".
</para>
<para>
OR operator precedence is higher than AND, so "looking for cat | dog | mouse"
means "looking for ( cat | dog | mouse )" and <emphasis>not</emphasis>
"(looking for cat) | dog | mouse".
</para>
<para>
Queries like "-dog", which implicitly include all documents from the
collection, can not be evaluated. This is both for technical and performance
reasons. Technically, Sphinx does not always keep a list of all IDs.
Performance-wise, when the collection is huge (ie. 10-100M documents),
evaluating such queries could take very long.
</para>
</sect2>


<sect2 id="extended-syntax"><title>Extended query syntax</title>
<para>
Extended queries allow the following special operators to be used:
<itemizedlist>
<listitem>operator OR: <programlisting>hello | world</programlisting></listitem>
<listitem>operator NOT:
<programlisting>
hello -world
hello !world
</programlisting>
</listitem>
<listitem>field search operator: <programlisting>@title hello @body world</programlisting></listitem>
<listitem>phrase search operator: <programlisting>"hello world"</programlisting></listitem>
<listitem>proximity search operator: <programlisting>"hello world"~10</programlisting></listitem>
</itemizedlist>

Here's an example query which uses all these operators:
<example id="ex-extended-query"><title>Extended query example</title>
<programlisting>
"hello world" @title "example program"~5 @body python -(php|perl)
</programlisting>
</example>
</para>
<para>
There always is implicit AND operator, so "hello world" means that
both "hello" and "world" must be present in matching document.
</para>
<para>
OR operator precedence is higher than AND, so "looking for cat | dog | mouse"
means "looking for ( cat | dog | mouse )" and <emphasis>not</emphasis>
"(looking for cat) | dog | mouse".
</para>
<para>
Proximity distance is specified in words, adjusted for word count, and
applies to all words within quotes. For instance, "cat dog mouse"~5 query
means that there must be less than 8-word span which contains all 3 words,
ie. "CAT aaa bbb ccc DOG eee fff MOUSE" document will <emphasis>not</emphasis>
match this query, because this span is exactly 8 words long.
</para>
<para>
Nested brackets, as in queries like
<programlisting>
aaa | ( bbb ccc | ( ddd eee ) )
</programlisting>
are not allowed yet, but this will be fixed.
</para>
<para>
Negation (ie. operator NOT) is only allowed on top level and not within
brackets (ie. groups). This isn't going to change, because supporting nested
negations would make phrase ranking implementation way too complicated.
</para>
</sect2>


<sect2 id="weighting"><title>Weighting</title>
<para>
Specific weighting function (currently) depends on the search mode.
</para>
<para>
There are these major parts which are used in the weighting functions:
<orderedlist>
<listitem>phrase rank,</listitem>
<listitem>statistical rank.</listitem>
</orderedlist>
</para>
<para>
Phrase rank is based on a length of longest common subsequence
(LCS) of search words between document body and query phrase. So if
there's a perfect phrase match in some document then its phrase rank
would be the highest possible, and equal to query words count.
</para>
<para>
Statistical rank is based on classic BM25 function which only takes
word frequencies into account. If the word is rare in the whole database
(ie. low frequency over document collection) or mentioned a lot in specific
document (ie. high frequency over matching document), it receives more weight.
Final BM25 weight is a floating point number between 0 and 1.
</para>
<para>
In all modes, per-field weighted phrase ranks are computed as
a product of LCS multiplied by per-field weight speficifed by user.
Per-field weights are integer, default to 1, and can not be set
lower than 1.
</para>
<para>
In SPH_MATCH_BOOLEAN mode, no weighting is performed at all, every match weight
is set to 1.
</para>
<para>
In SPH_MATCH_ALL and SPH_MATCH_PHRASE modes, final weight is a sum of weighted phrase ranks.
</para>
<para>
In SPH_MATCH_ANY mode, the idea is essentially the same, but it also
adds a count of matching words in each field. Before that, weighted
phrase ranks are additionally mutliplied by a value big enough to
guarantee that higher phrase rank in <emphasis role="bold">any</emphasis> field will make the
match ranked higher, even if it's field weight is low.
</para>
<para>
In SPH_MATCH_EXTENDED mode, final weight is a sum of weighted phrase
ranks and BM25 weight, multiplied by 1000 and rounded to integer.
</para>
<para>
This is going to be changed, so that MATCH_ALL and MATCH_ANY modes
use BM25 weights as well. This would improve search results in those
match spans where phrase ranks are equal; this is especially useful
for 1-word queries.
</para>
<para>
The key idea (in all modes, besides boolean) is that better subphrase
matches are ranked higher, and perfect matches are pulled to the top. Author's
experience is that this phrase proximity based ranking provides noticeably
better search quality than any statistical scheme alone (such as BM25,
which is commonly used in other search engines).
</para>
</sect2>


<sect2 id="sorting-modes"><title>Sorting modes</title>
<para>
There are the following result sorting modes available:
<itemizedlist>
<listitem>SPH_SORT_RELEVANCE, sorts by relevance in descending order (best matches first);</listitem>
<listitem>SPH_SORT_ATTR_DESC, sorts by attribute in descending order (bigger attribute values first);</listitem>
<listitem>SPH_SORT_ATTR_ASC, sorts by attribute in ascending order (smaller attribute values first);</listitem>
<listitem>SPH_SORT_TIME_SEGMENTS, sorts by time segments (last hour/day/week/month) in descending order, and then by relevance in descending order;</listitem>
<listitem>SPH_SORT_EXTENDED, sorts by SQL-like expression.</listitem>
</itemizedlist>
</para>
<para>
SPH_SORT_ATTR_ASC, SPH_SORT_ATTR_DESC and SPH_SORT_TIME_SEGMENTS modes
require an attribute to sort by to be specified.
</para>

<bridgehead>SPH_SORT_TIME_SEGMENTS mode</bridgehead>
<para>
In SPH_SORT_TIME_SEGMENTS mode, attribute values are split into so-called
time segments, and then sorted by time segment first, and by relevance second.
</para>
<para>
The segments are calculated according to the <emphasis>current timestamp</emphasis>
at the time when the search is performed, so the results would change over time.
The segments are as follows:
<itemizedlist>
<listitem>last hour,</listitem>
<listitem>last day,</listitem>
<listitem>last week,</listitem>
<listitem>last month,</listitem>
<listitem>last 3 months,</listitem>
<listitem>everything else.</listitem>
</itemizedlist>
These segments are hardcoded, but it is trivial to change them if necessary.
</para>
<para>
This mode was added to support searching through blogs, news headlines, etc.
When using time segments, recent records would be ranked higher because of segment,
but withing the same segment, more relevant records would be ranked higher -
unlike sorting by just the timestamp attribute, which would not take relevance
into account at all.
</para>

<bridgehead id="sort-extended">SPH_SORT_EXTENDED mode</bridgehead>
<para>
In SPH_SORT_EXTENDED mode, you would specify an SQL-like sort
expression to sort by:
<programlisting>
@relevance DESC, price ASC, @id DESC
</programlisting>
</para>
<para>
Both internal attributes (their names start with @) and externally
specified user attributes (their names are as is) can be allowed.
In the example above, <option>@relevance</option> and <option>@id</option>
are internal attributes and <option>price</option> is user-speficied.
</para>
<para>
Known internal attributes are:
<itemizedlist>
<listitem>@id (match ID)</listitem>
<listitem>@rank (match weight)</listitem>
<listitem>@weight (match weight)</listitem>
<listitem>@relevance (match weight)</listitem>
</itemizedlist>
<option>@rank</option>, <option>@weight</option> and <option>@relevance</option>
are just aliases; there's no actual difference between them.
</para>
</sect2>


<sect2 id="clustering"><title>Grouping (clustering) search results </title>
<para>
Sometimes it could be useful to group (or in other terms, cluster)
search results and/or count per-group match counts - for instance,
to draw a nice graph of how much maching blog posts were there per
each month; or to group Web search results by site; or to group
matching forum posts by author; etc.
</para>
<para>
In theory, this could be performed by doing only the full-text search
in Sphinx and then using found IDs to group on SQL server side. However,
in practice doing this with a big result set (10K-10M matches) would
typically kill performance.
</para>
<para>
To avoid that, Sphinx offers so-called grouping mode. It is enabled
with SetGroupBy() API call. When grouping, all matches are assigned to
different groups based on group-by value. This value is computed from
specified attribute using one of the following built-in functions:
<itemizedlist>
<listitem>SPH_GROUPBY_DAY, extracts year, month and day in YYYYMMDD format from timestamp;</listitem>
<listitem>SPH_GROUPBY_WEEK, extracts year and first day of the week number (counting from year start) in YYYYNNN format from timestamp;</listitem>
<listitem>SPH_GROUPBY_MONTH, extracts month in YYYYMM format from timestamp;</listitem>
<listitem>SPH_GROUPBY_YEAR, extracts year in YYYY format from timestamp;</listitem>
<listitem>SPH_GROUPBY_ATTR, uses attribute value itself for grouping.</listitem>
</itemizedlist>
</para>
<para>
The final search result set then contains one best match per group.
Grouping function value and per-group match count are returned along
as "virtual" attributes named
<emphasis role="bold">@group</emphasis> and
<emphasis role="bold">@count</emphasis> respectively.
</para>
<para>
The result set is sorted by group-by sorting clause, with the syntax similar
to <link linkend="sort-extended"><option>SPH_SORT_EXTENDED</option> sorting clause</link>
syntax. In addition to <option>@id</option> and <option>@weight</option>,
group-by sorting clause may also include:
<itemizedlist>
<listitem>@group (groupby function value),</listitem>
<listitem>@count (amount of matches in group).</listitem>
</itemizedlist>
</para>
<para>
The default mode is to sort by groupby value in descending order,
ie. by <option>"@group desc"</option>.
</para>
<para>
On completion, <option>total_found</option> result parameter would
contain total amount of matching groups over he whole index.
</para>
<para>
<emphasis role="bold">WARNING:</emphasis> grouping is done in fixed memory
and thus its results are only approximate; so there might be more groups reported
in <option>total_found</option> than actually present. <option>@count</option> might also
be underestimated. To reduce inaccuracy, one should raise <option>max_matches</option>.
If <option>max_matches</option> allows to store all found groups, results will be 100% correct.
</para>
<para>
For example, if sorting by relevance and grouping by <code>"published"</code>
attribute with <code>SPH_GROUPBY_DAY</code> function, then the result set will
contain
<itemizedlist>
<listitem>one most relevant match per each day when there were any
matches published,</listitem>
<listitem>with day number and per-day match count attached,</listitem>
<listitem>sorted by day number in descending order (ie. recent days first).</listitem>
</itemizedlist>
</para>
</sect2>


<sect2 id="distributed"><title>Distributed searching</title>
<para>
To scale well, Sphinx has distributed searching capabilities.
Distributed searching is useful to improve query latency (ie. search
time) and throughput (ie. max queries/sec) in multi-server, multi-CPU
or multi-core environments. This is essential for applications which
need to search through huge amounts data (ie. billions of records
and terabytes of text).
</para>
<para>
The key idea is to horizontally partition (HP) searched data
accross search nodes and then process it in parallel.
</para>
<para>
Partitioning is done manually. You would
<itemizedlist>
<listitem>setup several instances
of Sphinx programs (<filename>indexer</filename> and <filename>searchd</filename>)
on different servers;</listitem>
<listitem>make the instances index (and search) different parts of data;</listitem>
<listitem>configure a special distributed index on some of the <filename>searchd</filename>
instances;</listitem>
<listitem>and query this index.</listitem>.
</itemizedlist>
This index only contains references to other
local and remote indexes - so it could not be directly reindexed,
and you should reindex those indexes which it references instead.
</para>
<para>
When <filename>searchd</filename> receives a query against distributed index,
it does the following:
<orderedlist>
<listitem>connects to configured remote agents;</listitem>
<listitem>issues the query;</listitem>
<listitem>sequentially searches configured local indexes (while the remote agents are searching);</listitem>
<listitem>retrieves remote agents' search results;</listitem>
<listitem>merges all the results together, removing the duplicates;</listitem>
<listitem>sends the merged resuls to client.</listitem>
</orderedlist>
</para>
<para>
From the application's point of view, there are no differences
between usual and distributed index at all.
</para>
<para>
Any <filename>searchd</filename> instance could serve both as a master
(which aggregates the results) and a slave (which only does local searching)
at the same time. This has a number of uses:
<orderedlist>
<listitem>every machine in a cluster could serve as a master which
searches the whole cluster, and search requests could be balanced between
masters to achieve a kind of HA (high availability) in case any of the nodes fails;
</listitem>
<listitem>
if running within a single multi-CPU or multi-core machine, there
would be only 1 searchd instance quering itself as an agent and thus
utilizing all CPUs/core.
</listitem>
</orderedlist>
</para>
<para>
It is scheduled to implement better HA support which would allow
to specify which agents mirror each other, do health checks, keep track
of alive agents, load-balance requests, etc.
</para>
</sect2>


</sect1>
<sect1 id="sphinxse"><title>MySQL storage engine (SphinxSE)</title>


<sect2 id="sphinxse-overview"><title>SphinxSE overview</title>
<para>
SphinxSE is MySQL storage engine which can be compiled
into MySQL server 5.x using its pluggable architecure.
It is not available for MySQL 4.x series. It also requires
MySQL 5.0.22 or higher in 5.0.x series, or MySQL 5.1.12
or higher in 5.1.x series.
</para>
<para>
Despite the name, SphinxSE does <emphasis>not</emphasis>
actually store any data itself. It is actually a built-in client
which allows MySQL server to talk to <filename>searchd</filename>,
run search queries, and obtain search results. All indexing and
searching happen outside MySQL.
</para>
<para>
Obvious SphinxSE applications include:
<itemizedlist>
<listitem>easier porting of MySQL FTS applications to Sphinx;</listitem>
<listitem>allowing Sphinx use with progamming languages for which native APIs are not available yet;</listitem>
<listitem>optimizations when additional Sphinx result set processing on MySQL side is required
	(eg. JOINs with original document tables, additional MySQL-side filtering, etc).</listitem>
</itemizedlist>
</para>
</sect2>


<sect2 id="sphinxse-installing"><title>Installing SphinxSE</title>
<para>
You will need to obtain a copy of MySQL sources, prepare those,
and then recompile MySQL binary.
MySQL sources (mysql-5.x.yy.tar.gz) could be obtained from 
<ulink url="http://dev.mysql.com">dev.mysql.com</ulink> Web site.
</para>
<para>
For some MySQL versions, there are delta tarballs with already
prepared source versions available from Sphinx Web site. After unzipping
those over original sources MySQL would be ready to be configured and
built with Sphinx support.
</para>
<para>
If such tarball is not available, or does not work for you for any
reason, you would have to prepare sources manually. You will need to
GNU Autotools framework (autoconf, automake and libtool) installed
to do that.
</para>


<sect3 id="sphinxse-mysql50"><title>Compiling MySQL 5.0.x with SphinxSE</title>
<para>
Skips steps 1-3 if using already prepared delta tarball.
</para>
<orderedlist>
<listitem><para>copy <filename>sphinx.5.0.yy.diff</filename> patch file
into MySQL sources directory and run
<programlisting>
patch -p1 &lt; sphinx.5.0.yy.diff
</programlisting>
If there's no .diff file exactly for the specific version you need
to build, try applying .diff with closest version numbers. It is important
that the patch should apply with no rejects.
</para></listitem>
<listitem>in MySQL sources directory, run
<programlisting>
sh BUILD/autorun.sh
</programlisting>
</listitem>
<listitem>in MySQL sources directory, create <filename>sql/sphinx</filename>
directory in and copy all files in <filename>mysqlse</filename> directory 
from Sphinx sources there. Example:
<programlisting>
cp -R /root/builds/sphinx-0.9.7/mysqlse /root/builds/mysql-5.0.24/sql/sphinx
</programlisting>
</listitem>
<listitem>
configure MySQL and enable Sphinx engine:
<programlisting>
./configure --with-sphinx-storage-engine
</programlisting>
</listitem>
<listitem>
build and install MySQL:
<programlisting>
make
make install
</programlisting>
</listitem>
</orderedlist>
</sect3>


<sect3 id="sphinxse-mysql51"><title>Compiling MySQL 5.1.x with SphinxSE</title>
<para>
Skip steps 1-2 if using already prepared delta tarball.
</para>
<orderedlist>
<listitem>in MySQL sources directory, create <filename>storage/sphinx</filename>
directory in and copy all files in <filename>mysqlse</filename> directory 
from Sphinx sources there. Example:
<programlisting>
cp -R /root/builds/sphinx-0.9.7/mysqlse /root/builds/mysql-5.1.14/storage/sphinx
</programlisting>
</listitem>
<listitem>in MySQL sources directory, run
<programlisting>
sh BUILD/autorun.sh
</programlisting>
</listitem>
<listitem>
configure MySQL and enable Sphinx engine:
<programlisting>
./configure --with-plugins=sphinx
</programlisting>
</listitem>
<listitem>
build and install MySQL:
<programlisting>
make
make install
</programlisting>
</listitem>
</orderedlist>
</sect3>


<sect3 id="sphinxse-checking"><title>Checking SphinxSE installation</title>
To check whether SphinxSE has been succesfully compiled
into MySQL, launch newly built servers, run mysql client and
issue <code>SHOW ENGINES</code> query. You should see a list
of all available engines. Sphinx should be present and "Support"
column should contain "YES":

<programlisting>     
mysql> show engines;
+------------+----------+----------------------------------------------------------------+
| Engine     | Support  | Comment                                                        |
+------------+----------+----------------------------------------------------------------+
| MyISAM     | DEFAULT  | Default engine as of MySQL 3.23 with great performance         |
  ...
| SPHINX     | YES      | Sphinx storage engine                                          |
  ...
+------------+----------+----------------------------------------------------------------+
13 rows in set (0.00 sec)    
</programlisting>     
</sect3>
</sect2>


<sect2 id="sphinxse-using"><title>Using SphinxSE</title>
<para>
To search via SphinxSE, you would need to create special ENGINE=SPHINX "search table",
and then SELECT from it with full text query put into WHERE clause for query column.
</para>
<para>
Let's begin with an example create statement and search query:
<programlisting>
CREATE TABLE t1
(
    id          INTEGER NOT NULL,
    weight      INTEGER NOT NULL,
    query       VARCHAR(3072) NOT NULL,
    group_id    INTEGER,
    INDEX(query)
) ENGINE=SPHINX CONNECTION="sphinx://localhost:3312/test";

SELECT * FROM t1 WHERE query='test it;mode=any';
</programlisting>
</para>
<para>
First 3 columns of search table <emphasis>must</emphasis> be <code>INTEGER</code>,
<code>INTEGER</code> and <code>VARCHAR</code> which will be mapped to document ID,
match weight and search query accordingly. There also must be indexes on document ID
and search query columns. These columns' names are insignficant.
</para>
<para>
Additional columns must be either <code>INTEGER</code> or <code>TIMESTAMP</code>.
They will be bound to attributes provided in Sphinx result set by name, so their
names must match attribute names specified in <filename>sphinx.conf</filename>.
If there's no such attribute name in Sphinx search results, column will have
<code>NULL</code> values.
</para>
<para>
<code>CONNECTION</code> string parameter can be used to specify default
searchd host, port and indexes for queries issued using this table.
If no connection string is specified in <code>CREATE TABLE</code>,
index name "*" (ie. search all indexes) and localhost:3312 are assumed.
Connection string syntax is as follows:
<programlisting>
CONNECTION="sphinx://HOST:PORT/INDEXNAME"
</programlisting>
You can change the default connection string later:
<programlisting>
ALTER TABLE t1 CONNECTION="sphinx://NEWHOST:NEWPORT/NEWINDEXNAME";
</programlisting>
You can also override all these parameters per-query.
</para>
<para>
As seen in example, both query text and search options should be put
into WHERE clause on search query column (ie. 3rd column); the options
are separated by semicolons; and their names from values by equality sign.
Any number of options can be specified. Available options are:
<itemizedlist>
<listitem>query - query text;</listitem>
<listitem>mode - matching mode. Must be one of "all", "any", "phrase",
	"boolean", or "extended". Default is "all";</listitem>
<listitem>sort - match sorting mode. Must be one of "relevance", "attr_desc",
"attr_asc", "time_segments", or "extended". In all modes besides "relevance"
attribute name (or sorting clause for "extended") is also required after a colon:
<programlisting>
... WHERE query='test;sort=attr_asc:group_id';
... WHERE query='test;sort=extended:@weight desc, group_id asc';
</programlisting>
</listitem>
<listitem>offset - offset into result set, default is 0;</listitem>
<listitem>limit - amount of matches to retrieve from result set, default is 20;</listitem>
<listitem>index - names of the indexes to search:
<programlisting>
... WHERE query='test;index=test1;';
... WHERE query='test;index=test1,test2,test3;';
</programlisting>
</listitem>
<listitem>minid, maxid - min and max document ID to match;</listitem>
<listitem>weights - comma-separated list of weights to be assigned to Sphinx full-text fields:
<programlisting>
... WHERE query='test;weights=1,2,3;';
</programlisting>
</listitem>
<listitem>filter, !filter - comma-separated attribute name and a set of values to match:
<programlisting>
# only include groups 1, 5 and 19
... WHERE query='test;filter=group_id,1,5,19;';

# exclude groups 3 and 11
... WHERE query='test;!filter=group_id,3,11;';
</programlisting>
</listitem>
<listitem>range, !range - comma-separated attribute name, min and max value to match:
<programlisting>
# include groups from 3 to 7, inclusive
... WHERE query='test;range=group_id,3,7;';

# exclude groups from 5 to 25
... WHERE query='test;!range=group_id,5,25;';
</programlisting>
</listitem>
<listitem>maxmatches - per-query max matches value:
<programlisting>
... WHERE query='test;maxmatches=2000;';
</programlisting>
</listitem>
<listitem>groupby - group-by function and attribute:
<programlisting>
... WHERE query='test;groupby=day:published_ts;';
... WHERE query='test;groupby=attr:group_id;';
</programlisting>
</listitem>
<listitem>groupsort - group-by sorting clause:
<programlisting>
... WHERE query='test;groupsort=@count desc;';
</programlisting>
</listitem>
</itemizedlist>
</para>
<para>
One <emphasis role="bold">very important</emphasis> note that it is
<emphasis role="bold">much</emphasis> more efficient to allow Sphinx
to perform sorting, filtering and slicing the result set than to raise
max matches count and use WHERE, ORDER BY and LIMIT clauses on MySQL
side. This is for two reasons. First, Sphinx does a number of
optimizations and performs better than MySQL on these tasks.
Second, less data would need to be packed by searchd, transferred
and unpacked by SphinxSE.
</para>
<para>
Additional query info besides result set could be
retrieved with <code>SHOW ENGINE SPHINX STATUS</code> statement:
<programlisting>
mysql> SHOW ENGINE SPHINX STATUS;
+--------+-------+-------------------------------------------------+
| Type   | Name  | Status                                          |
+--------+-------+-------------------------------------------------+
| SPHINX | stats | total: 25, total found: 25, time: 126, words: 2 | 
| SPHINX | words | sphinx:591:1256 soft:11076:15945                | 
+--------+-------+-------------------------------------------------+
2 rows in set (0.00 sec)
</programlisting>
</para>
<para>
You could perform JOINs on SphinxSE search table and tables using
other engines. Here's an example with "documents" from example.sql:
<programlisting>
mysql> SELECT content, date_added FROM test.documents docs
-> JOIN t1 ON (docs.id=t1.id) 
-> WHERE query="one document;mode=any";
+-------------------------------------+---------------------+
| content                             | docdate             |
+-------------------------------------+---------------------+
| this is my test document number two | 2006-06-17 14:04:28 | 
| this is my test document number one | 2006-06-17 14:04:28 | 
+-------------------------------------+---------------------+
2 rows in set (0.00 sec)

mysql> SHOW ENGINE SPHINX STATUS;
+--------+-------+---------------------------------------------+
| Type   | Name  | Status                                      |
+--------+-------+---------------------------------------------+
| SPHINX | stats | total: 2, total found: 2, time: 0, words: 2 | 
| SPHINX | words | one:1:2 document:2:2                        | 
+--------+-------+---------------------------------------------+
2 rows in set (0.00 sec)
</programlisting>
</para>
</sect2>


</sect1>
<sect1 id="reporting-bugs"><title>Reporting bugs</title>


<para>
Unfortunately, Sphinx is not yet 100% bug free (even though I'm working hard
towards that), so you might occasionally run into some issues.
</para>
<para>
Reporting as much as possible about each bug is very important -
because to fix it, I need to be able either to reproduce and debug the bug,
or to deduce what's causing it from the information that you provide.
So here are some instructions on how to do that.
</para>


<bridgehead>Build-time issues</bridgehead>
<para>If Sphinx fails to build for some reason, please do the following:</para>
<orderedlist>
<listitem>check that headers and libraries for your DBMS are properly installed
(for instance, check that <filename>mysql-devel</filename> package is present);
</listitem>
<listitem>report Sphinx version and config file (be sure to remove the passwords!),
MySQL (or PostgreSQL) configuration info, gcc version, OS version and CPU type
(ie. x86, x86-64, PowerPC, etc):
<programlisting>
mysql_config
gcc --version
uname -a
</programlisting>
</listitem>
<listitem>
report the error message which is produced by <filename>configure</filename>
or <filename>gcc</filename> (it should be to include error message itself only,
not the whole build log).
</listitem>
</orderedlist>


<bridgehead>Run-time issues</bridgehead>
<para>
If Sphinx builds and runs, but there are any problems running it,
please do the following:
</para>
<orderedlist>
<listitem>describe the bug (ie. both the expected behavior and actual behavior)
and all the steps necessary to reproduce it;</listitem>
<listitem>include Sphinx version and config file (be sure to remove the passwords!),
MySQL (or PostgreSQL) version, gcc version, OS version and CPU type (ie. x86, x86-64,
PowerPC, etc):
<programlisting>
mysql --version
gcc --version
uname -a
</programlisting>
</listitem>
<listitem>build, install and run debug versions of all Sphinx programs (this is
to enable a lot of additional internal checks, so-called assertions):
<programlisting>
make distclean
./configure --with-debug
make install
killall -TERM searchd
</programlisting>
</listitem>
<listitem>reindex to check if any assertions are triggered (in this case,
it's likely that the index is corrupted and causing problems);
</listitem>
<listitem>if the bug does not reproduce with debug versions,
revert to non-debug and mention it in your report;
</listitem>
<listitem>if the bug could be easily reproduced with a small (1-100 record)
part of your database, please provide a gzipped dump of that part;
</listitem>
<listitem>if the problem is related to <filename>searchd</filename>, include
relevant entries from <filename>searchd.log</filename> and
<filename>query.log</filename> in your bug report;
</listitem>
<listitem>if the problem is related to <filename>searchd</filename>, try
running it in console mode and check if it dies with an assertion:
<programlisting>
./searchd --console
</programlisting>
</listitem>
<listitem>if any program dies with an assertion, provide the assertion message.</listitem>
</orderedlist>


<bridgehead>Debugging assertions, crashes and hangups</bridgehead>
<para>
If any program dies with an assertion, crashes without an assertion or hangs up,
you would additionally need to generate a core dump and examine it.
</para>
<orderedlist>
<listitem>
enable core dumps. On most Linux systems, this is done
using <filename>ulimit</filename>:
<programlisting>
ulimit -c 32768
</programlisting>
</listitem>
<listitem>
run the program and try to reproduce the bug;
</listitem>
<listitem>
if the program crashes (either with or without an assertion),
find the core file in current directory (it should typically print
out "Segmentation fault (core dumped)" message);
</listitem>
<listitem>
if the program hangs, use <filename>kill -SEGV</filename>
from another console to force it to exit and dump core:
<programlisting>
kill -SEGV HANGED-PROCESS-ID
</programlisting>
</listitem>
<listitem>
use <filename>gdb</filename> to examine the core file
and obtain a backtrace:
<programlisting>
gdb ./CRASHED-PROGRAM-FILE-NAME CORE-DUMP-FILE-NAME
(gdb) bt
(gdb) quit
</programlisting>
</listitem>
</orderedlist>
<para>
Note that HANGED-PROCESS-ID, CRASHED-PROGRAM-FILE-NAME and
CORE-DUMP-FILE-NAME must all be replaced with specific numbers
and file names. For example, hanged searchd debugging session
would look like:
<programlisting>
# kill -SEGV 12345
# ls *core*
core.12345
# gdb ./searchd core.12345
(gdb) bt
...
(gdb) quit
</programlisting>
</para>
<para>
Note that <filename>ulimit</filename> is not server-wide
and only affects current shell session. This means that you will not
have to restore any server-wide limits - but if you relogin,
you will have to set <filename>ulimit</filename> again.
</para>
<para>
Core dumps should be placed in current working directory
(and Sphinx programs do not change it), so this is where you
would look for them.
</para>
<para>
Please do not immediately remove the core file because there could
be additional helpful information which could be retrieved from it.
You do not need to send me this file (as the debug info there is
closely tied to your system) but I might need to ask
you a few additional questions about it.
</para>


</sect1>
<sect1 id="reference"><title><filename>sphinx.conf</filename> options reference</title>


<sect2 id="ref-source"><title>Data source configuration options</title>

<sect3 id="ref-source-type"><title>type</title>
<para>
Data source type. Available types are <option>mysql</option>, <option>pgsql</option>
and <option>xmlpipe</option>.
</para>
<para>
This option is <emphasis role="bold">mandatory</emphasis>.
</para>
<bridgehead>Example:</bridgehead>
<programlisting>
type = mysql
</programlisting>
</sect3>


<sect3 id="ref-strip-html"><title>strip_html</title>
<para>
Whether to strip HTML formatting from incoming full-text data.
0 means that stripping should be disabled; 1 that it should be enabled.
</para>
<para>
Stripping currently works with <option>mysql</option> and
<option>pgsql</option> source, and is not yet implemented for
<option>xmlpipe</option>. It should work with properly formed
HTML (such as well-formed XHTML) but MAY bug on malformed HTML
(such as with stray &lt;'s or unclosed &gt;'s).
</para>
<para>
This option is optional.
Default value is 0 (do not strip HTML).
This option only applies to <option>mysql</option> and <option>pgsql</option> source types.
</para>
<bridgehead>Example:</bridgehead>
<programlisting>
strip_html = 0
</programlisting>
</sect3>


<sect3 id="ref-index-html-attrs"><title>index_html_attrs</title>
<para>
Specifies which HTML attributes' contents still should be indexed when stripping HTML.
The format is per-tag enumeration of indexable attributes, as shown in the example below.
</para>
<para>
This option is optional.
Default value is empty (do not index anything).
This option only applies to <option>mysql</option> and <option>pgsql</option> source types.
</para>
<bridgehead>Example:</bridgehead>
<programlisting>
index_html_attrs = img=alt,title; a=title;
</programlisting>
</sect3>


<sect3 id="ref-sql-host"><title>sql_host</title>
<para>
SQL server host to connect to.
</para>
<para>
This option is <emphasis role="bold">mandatory</emphasis>.
This option only applies to <option>mysql</option> and <option>pgsql</option> source types.
</para>
<bridgehead>Example:</bridgehead>
<programlisting>
sql_host = localhost
</programlisting>
</sect3>


<sect3 id="ref-sql-port"><title>sql_port</title>
<para>
SQL server IP port to connect to.
</para>
<para>
This option is optional.
Default value is 3306 for <option>mysql</option> source type and 5432 for <option>pgsql</option> type.
This option only applies to <option>mysql</option> and <option>pgsql</option> source types.
</para>
<bridgehead>Example:</bridgehead>
<programlisting>
sql_port = 3306
</programlisting>
</sect3>


<sect3 id="ref-sql-user"><title>sql_user</title>
<para>
SQL user to use on <link linkend="ref-sql-host">sql_host</link>.
</para>
<para>
This option is <emphasis role="bold">mandatory</emphasis>.
This option only applies to <option>mysql</option> and <option>pgsql</option> source types.
</para>
<bridgehead>Example:</bridgehead>
<programlisting>
sql_user = test
</programlisting>
</sect3>


<sect3 id="ref-sql-pass"><title>sql_pass</title>
<para>
SQL user password to use on <link linkend="ref-sql-host">sql_host</link>.
</para>
<para>
This option is <emphasis role="bold">mandatory</emphasis>.
This option only applies to <option>mysql</option> and <option>pgsql</option> source types.
</para>
<bridgehead>Example:</bridgehead>
<programlisting>
sql_pass = mysecretpassword
</programlisting>
</sect3>


<sect3 id="ref-sql-db"><title>sql_db</title>
<para>
SQL database (in MySQL terms) to use after connection and perform further queries in.
</para>
<para>
This option is <emphasis role="bold">mandatory</emphasis>.
This option only applies to <option>mysql</option> and <option>pgsql</option> source types.
</para>
<bridgehead>Example:</bridgehead>
<programlisting>
sql_db = test
</programlisting>
</sect3>


<sect3 id="ref-sql-sock"><title>sql_sock</title>
<para>
UNIX socket name to connect to local MySQL server.
</para>
<para>
On Linux, it would typically be <filename>/var/lib/mysql/mysql.sock</filename>.
On FreeBSD, it would typically be <filename>/tmp/mysql.sock</filename>.
</para>
<para>
This option is optional.
This option only applies to <option>mysql</option> source type.
</para>
<bridgehead>Example:</bridgehead>
<programlisting>
sql_sock = /tmp/mysql.sock
</programlisting>
</sect3>


<sect3 id="ref-sql-query-pre"><title>sql_query_pre</title>
<para>
Pre-fetch query, or pre-query.
</para>
<para>
There might be multiple pre-queries specified. They are executed
before <link linkend="ref-sql-query">the main fetch query</link>
in exactly the same order they were specified in config file.
Pre-query results are ignored.
</para>
<para>
Pre-queries are useful to setup encoding, or mark records
which are going to be indexed, or update internal counters, etc.
</para>
<para>
This option is optional.
This option only applies to <option>mysql</option> and <option>pgsql</option> source types.
</para>
<bridgehead>Example:</bridgehead>
<programlisting>
sql_query_pre = SET CHARACTER_SET_RESULTS=utf-8
</programlisting>
</sect3>


<sect3 id="ref-sql-query"><title>sql_query</title>
<para>
Main document fetch query.
</para>
<para>
There can be only one main query. This is the query which is used to
retrieve documents from SQL server.
</para>
<para>
You can specify up to 32 fields (formally, upto SPH_MAX_FIELDS from sphinx.h).
All of the fields which are not document ID or attributes will be full-text indexed.
</para>
<para>
Document ID <emphasis role="bold">MUST</emphasis> be the very first field,
and it <emphasis role="bold">MUST BE UNIQUE UNSIGNED NON-ZERO 32-BIT INTEGER NUMBER</emphasis>.
</para>
<para>
This option is <emphasis role="bold">mandatory</emphasis>.
This option only applies to <option>mysql</option> and <option>pgsql</option> source types.
</para>
<bridgehead>Example:</bridgehead>
<programlisting>
sql_query = \
	SELECT id, group_id, UNIX_TIMESTAMP(date_added) AS date_added, \
		title, content \
	FROM documents
</programlisting>
</sect3>


<sect3 id="ref-sql-query-range"><title>sql_query_range</title>
<para>
Query which fetches min/max document IDs range to be used in ranged query (see <xref linkend="ranged-queries"/>).
</para>
<para>
This option is optional.
This option only applies to <option>mysql</option> and <option>pgsql</option> source types.
</para>
<bridgehead>Example:</bridgehead>
<programlisting>
sql_query_range = SELECT MIN(id),MAX(id) FROM documents
</programlisting>
</sect3>


<sect3 id="ref-sql-range-step"><title>sql_range_step</title>
<para>
How much records to index per one ranged query step (see <xref linkend="ranged-queries"/>).
</para>
<para>
This option is optional.
Default value is 1024.
This option only applies to <option>mysql</option> and <option>pgsql</option> source types.
</para>
<bridgehead>Example:</bridgehead>
<programlisting>
sql_range_step = 1000
</programlisting>
</sect3>


<sect3 id="ref-sql-group-column"><title>sql_group_column</title>
<para>
Integer attribute column declaration. Specified column should be present among
those fetched by <xref linkend="ref-sql-query"/>.
</para>
<para>
There might be multiple attributes specified.
</para>
<para>
This option is optional.
This option only applies to <option>mysql</option> and <option>pgsql</option> source types.
</para>
<bridgehead>Example:</bridgehead>
<programlisting>
sql_group_column = group_id    # declare 1st attribute
sql_group_column = author_id   # declare 2nd attribute
</programlisting>
</sect3>


<sect3 id="ref-sql-date-column"><title>sql_date_column</title>
<para>
UNIX timestamp attribute column declaration. Specified column should be present among
those fetched by <xref linkend="ref-sql-query"/>.
</para>
<para>
There might be multiple attributes specified.
</para>
<para>
This option is optional.
This option only applies to <option>mysql</option> and <option>pgsql</option> source types.
</para>
<bridgehead>Example:</bridgehead>
<programlisting>
sql_date_column = added_ts
</programlisting>
</sect3>


<sect3 id="ref-sql-str2ordinal-column"><title>sql_str2ordinal_column</title>
<para>
Ordinal string number attribute column declaration. Specified column should be present among
those fetched by <xref linkend="ref-sql-query"/>.
</para>
<para>
When indexing such attributes, string values are fetched from database,
stored, sorted and then replaced by ordinal number (integer) in the sorted
strings array. These integers could then be used when searching to sort by 
by string values lexicographically.
</para>
<para>
<emphasis role="bold">WARNING</emphasis>, all such string values
are going to be stored in RAM while indexing!
</para>
<para>
<emphasis role="bold">WARNING</emphasis>, "C" locale will be used when sorting!
</para>
<para>
There might be multiple attributes specified.
</para>
<para>
This option is optional.
This option only applies to <option>mysql</option> and <option>pgsql</option> source types.
</para>
<bridgehead>Example:</bridgehead>
<programlisting>
sql_str2ordinal_column = author_name
</programlisting>
</sect3>


<sect3 id="ref-sql-query-post"><title>sql_query_post</title>
<para>
Post-fetch query, executed immediately after main fetch
query (<xref linkend="ref-sql-query"/>) ends. If this query produces
errors, they are reported as warnings, but indexing is NOT terminated.
It's result set is ignored.
</para>
<para>
Note that indexing is NOT completed at the point when post-query
gets executed, and further indexing might fail.
</para>
<para>
This option is optional.
This option only applies to <option>mysql</option> and <option>pgsql</option> source types.
</para>
<bridgehead>Example:</bridgehead>
<programlisting>
sql_query_post = DROP TABLE my_tmp_table
</programlisting>
</sect3>


<sect3 id="ref-sql-query-post-index"><title>sql_query_post_index</title>
<para>
Post-index query, executed when indexing is succesfully completed.
If this query produces errors, they are reported as warnings,
but indexing is NOT terminated. It's result set is ignored.
</para>
<para>
In this query, you can use <code>$maxid</code> macro, expanded
to max document ID which was actually fetched from the database
during indexing.
</para>
<para>
This option is optional.
This option only applies to <option>mysql</option> and <option>pgsql</option> source types.
</para>
<bridgehead>Example:</bridgehead>
<programlisting>
sql_query_post_index = REPLACE INTO counters ( id, val ) \
    VALUES ( 'max_indexed_id', $maxid )
</programlisting>
</sect3>


<sect3 id="ref-sql-query-info"><title>sql_query_info</title>
<para>
Document info query. Only used by CLI search to fetch and display
document information; and only intended for debugging purposes.
</para>
<para>
This query fetches info to be displayed by CLI search utility
by document ID. Therefore, it must contain <code>$id</code> macro.
</para>
<para>
This option is optional.
This option only applies to <option>mysql</option> and <option>pgsql</option> source types.
</para>
<bridgehead>Example:</bridgehead>
<programlisting>
sql_query_info = SELECT * FROM documents WHERE id=$id
</programlisting>
</sect3>


<sect3 id="ref-xmlpipe-command"><title>xmlpipe_command</title>
<para>
Command which will be executed in xmlpipe mode to obtain documents.
See <xref linkend="xmlpipe"/> for output format description.
</para>
	# xmlpipe_command	= cat @CONFDIR@/test.xml
<para>
This option is <emphasis role="bold">mandatory</emphasis>.
This option only applies to <option>xmlpipe</option> source type.
</para>
<bridgehead>Example:</bridgehead>
<programlisting>
xmlpipe_command = cat /home/sphinx/test.xml
</programlisting>
</sect3>


</sect2>
<!--
<sect2 id="ref-index"><title>Index configuration options</title>
(to be added)
</sect2>
<sect2 id="ref-indexer"><title><filename>indexer</filename> program configuration options</title>
(to be added)
</sect2>
<sect2 id="ref-searchd"><title><filename>searchd</filename> program configuration options</title>
(to be added)
</sect2>
-->

</sect1>

<!--
<sect1 id="developers"><title>Developer's corner</title>

<sect2 id="architecture-overview"><title>Sphinx architecture overview</title>
(to be added)
</sect2>

<sect2 id="adding-data-sources"><title>Adding new data source drivers</title>
(to be added)
</sect2>

<sect2 id="adding-data-sources"><title>API porting guidelines</title>
(to be added)
</sect2>

</sect1>
-->

<appendix id="changelog"><title>Sphinx revision history</title>

<sect2 id="ver_0_9_7"><title>Version 0.9.7, 02 apr 2007</title>
<itemizedlist>
<listitem>added support for <option>sql_str2ordinal_column</option></listitem>
<listitem>added support for upto 5 sort-by attrs (in extended sorting mode)</listitem>
<listitem>added support for separate groups sorting clause (in group-by mode)</listitem>
<listitem>added support for on-the-fly attribute updates (PRE-ALPHA; will change heavily; use for preliminary testing ONLY)</listitem>
<listitem>added support for zero/NULL attributes</listitem>
<listitem>added support for 0.9.7 features to SphinxSE</listitem>
<listitem>added support for n-grams (alpha, 1-grams only for now)</listitem>
<listitem>added support for warnings reported to client</listitem>
<listitem>added support for exclude-filters</listitem>
<listitem>added support for prefix and infix indexing (see <option>max_prefix_len</option>, <option>max_infix_len</option>)</listitem>
<listitem>added <option>@*</option> syntax to reset current field to query language</listitem>
<listitem>added removal of duplicate entries in query index order</listitem>
<listitem>added PHP API workarounds for PHP signed/unsigned braindamage</listitem>
<listitem>added locks to avoid two concurrent indexers working on same index</listitem>
<listitem>added check for existing attributes vs. <option>docinfo=none</option> case</listitem>
<listitem>improved groupby code a lot (better precision, and upto 25x times faster in extreme cases)</listitem>
<listitem>improved error handling and reporting</listitem>
<listitem>improved handling of broken indexes (reports error instead of hanging/crashing)</listitem>
<listitem>improved <option>mmap()</option> limits for attributes and wordlists (now able to map over 4 GB on x64 and over 2 GB on x32 where possible)</listitem>
<listitem>improved <option>malloc()</option> pressure in head daemon (search time should not degrade with time any more)</listitem>
<listitem>improved <filename>test.php</filename> command line options</listitem>
<listitem>improved error reporting (distributed query, broken index etc issues now reported to client)</listitem>
<listitem>changed default network packet size to be 8M, added extra checks</listitem>
<listitem>fixed division by zero in BM25 on 1-document collections (in extended matching mode)</listitem>
<listitem>fixed <filename>.spl</filename> files getting unlinked</listitem>
<listitem>fixed crash in schema compatibility test</listitem>
<listitem>fixed UTF-8 Russian stemmer</listitem>
<listitem>fixed requested matches count when querying distributed agents</listitem>
<listitem>fixed signed vs. unsigned issues everywhere (ranged queries, CLI search output, and obtaining docid)</listitem>
<listitem>fixed potential crashes vs. negative query offsets</listitem>
<listitem>fixed 0-match docs vs. extended mode vs. stats</listitem>
<listitem>fixed group/timestamp filters being ignored if querying from older clients</listitem>
<listitem>fixed docs to mention <option>pgsql</option> source type</listitem>
<listitem>fixed issues with explicit '&amp;' in extended matching mode</listitem>
<listitem>fixed wrong assertion in SBCS encoder</listitem>
<listitem>fixed crashes with no-attribute indexes after rotate</listitem>
</itemizedlist>
</sect2>

<sect2 id="ver_0_9_7_rc2"><title>Version 0.9.7-RC2, 15 dec 2006</title>
<itemizedlist>
<listitem>added support for extended matching mode (query language)</listitem>
<listitem>added support for extended sorting mode (sorting clauses)</listitem>
<listitem>added support for SBCS excerpts</listitem>
<listitem>added <option>mmap()ing</option> for attributes and wordlist (improves search time, speeds up <option>fork()</option> greatly)</listitem>
<listitem>fixed attribute name handling to be case insensitive</listitem>
<listitem>fixed default compiler options to simplify post-mortem debugging (added <option>-g</option>, removed <option>-fomit-frame-pointer</option>)</listitem>
<listitem>fixed rare memory leak</listitem>
<listitem>fixed "hello hello" queries in "match phrase" mode</listitem>
<listitem>fixed issue with excerpts, texts and overlong queries</listitem>
<listitem>fixed logging multiple index name (no longer tokenized)</listitem>
<listitem>fixed trailing stopword not flushed from tokenizer</listitem>
<listitem>fixed boolean evaluation</listitem>
<listitem>fixed pidfile being wrongly <option>unlink()ed</option> on <option>bind()</option> failure</listitem>
<listitem>fixed <option>--with-mysql-includes/libs</option> (they conflicted with well-known paths)</listitem>
<listitem>fixes for 64-bit platforms</listitem>
</itemizedlist>
</sect2>

<sect2 id="ver_0_9_7_rc1"><title>Version 0.9.7-RC1, 26 oct 2006</title>
<itemizedlist>
<listitem>added alpha index merging code</listitem>
<listitem>added an option to decrease <option>max_matches</option> per-query</listitem>
<listitem>added an option to specify IP address for searchd to listen on</listitem>
<listitem>added support for unlimited amount of configured sources and indexes</listitem>
<listitem>added support for group-by queries</listitem>
<listitem>added support for /2 range modifier in charset_table</listitem>
<listitem>added support for arbitrary amount of document attributes</listitem>
<listitem>added logging filter count and index name</listitem>
<listitem>added <option>--with-debug</option> option to configure to compile in debug mode</listitem>
<listitem>added <option>-DNDEBUG</option> when compiling in default mode</listitem>
<listitem>improved search time (added doclist size hints, in-memory wordlist cache, and used VLB coding everywhere)</listitem>
<listitem>improved (refactored) SQL driver code (adding new drivers should be very easy now)</listitem>
<listitem>improved exceprts generation</listitem>
<listitem>fixed issue with empty sources and ranged queries</listitem>
<listitem>fixed querying purely remote distributed indexes</listitem>
<listitem>fixed suffix length check in English stemmer in some cases</listitem>
<listitem>fixed UTF-8 decoder for codes over U+20000 (for CJK)</listitem>
<listitem>fixed UTF-8 encoder for 3-byte sequences (for CJK)</listitem>
<listitem>fixed overshort (less than <option>min_word_len</option>) words prepended to next field</listitem>
<listitem>fixed source connection order (indexer does not connect to all sources at once now)</listitem>
<listitem>fixed line numbering in config parser</listitem>
<listitem>fixed some issues with index rotation</listitem>
</itemizedlist>
</sect2>

<sect2 id="ver_0_9_6"><title>Version 0.9.6, 24 jul 2006</title>
<itemizedlist>
<listitem>added support for empty indexes</listitem>
<listitem>added support for multiple sql_query_pre/post/post_index</listitem>
<listitem>fixed timestamp ranges filter in "match any" mode</listitem>
<listitem>fixed configure issues with --without-mysql and --with-pgsql options</listitem>
<listitem>fixed building on Solaris 9</listitem>
</itemizedlist>
</sect2>

<sect2 id="ver_0_9_6_rc1"><title>Version 0.9.6-RC1, 26 jun 2006</title>
<itemizedlist>
<listitem>added boolean queries support (experimental, beta version)</listitem>
<listitem>added simple file-based query cache (experimental, beta version)</listitem>
<listitem>added storage engine for MySQL 5.0 and 5.1 (experimental, beta version)</listitem>
<listitem>added GNU style <filename>configure</filename> script</listitem>
<listitem>added new searchd protocol (all binary, and should be backwards compatible)</listitem>
<listitem>added distributed searching support to searchd</listitem>
<listitem>added PostgreSQL driver</listitem>
<listitem>added excerpts generation</listitem>
<listitem>added <option>min_word_len</option> option to index</listitem>
<listitem>added <option>max_matches</option> option to searchd, removed hardcoded MAX_MATCHES limit</listitem>
<listitem>added initial documentation, and a working <filename>example.sql</filename></listitem>
<listitem>added support for multiple sources per index</listitem>
<listitem>added soundex support</listitem>
<listitem>added group ID ranges support</listitem>
<listitem>added <option>--stdin</option> command-line option to search utility</listitem>
<listitem>added <option>--noprogress</option> option to indexer</listitem>
<listitem>added <option>--index</option> option to search</listitem>
<listitem>fixed UTF-8 decoder (3-byte codepoints did not work)</listitem>
<listitem>fixed PHP API to handle big result sets faster</listitem>
<listitem>fixed config parser to handle empty values properly</listitem>
<listitem>fixed redundant <code>time(NULL)</code> calls in time-segments mode</listitem>
</itemizedlist>
</sect2>

</appendix>

</article>
