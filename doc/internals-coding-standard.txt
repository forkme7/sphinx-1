Sphinx coding standard
=======================

WARNING. This document is just an internal note. It might or might not be
in sync with the actual code. Use it as an overview; refer to the source
for precise details.

General
--------

This document describes C++ coding standard that MUST be used for
Sphinx source code.

It is not yet complete. Currently, we're not aiming for an exhaustive set
of rules (that noone will read anyway). Rather, we're covering only those
gray areas that are not immediately obvious from the source. However,
you should also *first* refer to the source for general look and feel.

Certain rules might change over time. However, the following rules are not
going to be changed:

- All source parts must look alike.
- When in doubt, ask. If not answered, mimic. (And ask again.)

1. General formatting rules
----------------------------

- No duplicate spaces, use tabs.
- Indent is 1 tab.
- Tab size is 4.

2. Formatting C++ clauses
--------------------------

2.1. Enumeration
-----------------

enum ESphExample
{
	FIRST		= mandatory_value,
	SECOND,
	THIRD,
	FOURTH
};

2.2. Switch statement
----------------------

switch ( tMyCondition )
{
	case FIRST:		iShortStatement = 1; break;
	case SECOND:	iAnotherShortStatement = 2; break;
	case THIRD:
		iLongerStatement = 3;
		DoSomething();
		break;
	case FOURTH:
		{
			int iEvenLongerStatementWithLocals = 4;
			DoSomethingElse();
			break;
		}
}

2.3. Parentheses
-----------------

- 1 space around opening '('.
- 1 space before closing ')'.
- Empty argument lists in function calls can omit spaces.
- Short 1-argument lists can omit spaces too.

TypicalCall ( iFirst, sSecond );
NullArglist();
ShortArglist(i);
StillShortArglist(iIdx);
LongEnoughArglist ( iFirst );
iVar = !( iCode & BOOLEAN_EXPRESSION );
if ( i==1 || ( j==2 && k==3 ) ) { ... }
if ( i )  {... }

--eof--
